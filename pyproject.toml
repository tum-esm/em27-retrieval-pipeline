[project]
name = "em27-retrieval-pipeline"
version = "1.5.3"
description = "automated EM27 data processing"
authors = [
    { name = "Moritz Makowski", email = "moritz.makowski@tum.de" },
    { name = "Marlon MÃ¼ller" },
    { name = "Andreas Luther" },
    { name = "Vyas Giridhard" },
    { name = "Catehrine Fait" },
]
dependencies = [
    "filelock>=3.16.1",
    "pydantic>=2.10.2",
    "em27-metadata>=1.2.1",
    "tum-esm-utils>=2.4.0",
    "tomli>=2.2.1",
    "python-dotenv>=1.0.1",
    "skyfield>=1.49",        # used by the retrieval
    "rich>=13.9.4",          # used by export and profiles download
    "click>=8.1.7",          # used by CLI
    "scipy>=1.14.1",         # used by export (interpolation)
    "polars>=1.15.0",        # used by export
    "numpy>=2.1.3",          # used by Proffast Pylot only
    "tqdm>=4.67.1",          # used by Proffast Pylot only
    "pandas>=2.2.3",         # used by Proffast Pylot only
    "pytz>=2024.2",          # used by Proffast Pylot only
    "timezonefinder>=6.5.5", # used by Proffast Pylot only
    "pyyaml>=6.0.2",         # used by Proffast Pylot only
    "fortranformat>=2.0.0",  # used by Proffast Pylot only
]
classifiers = [
    "License :: OSI Approved :: GNU General Public License (GPL)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10,<4.0"
readme = "README.md"
license = { text = "GPL-3.0" }

[project.urls]
repository = "https://github.com/tum-esm/em27-retrieval-pipeline"
documentation = "https://em27-retrieval-pipeline.netlify.app"

[project.optional-dependencies]
dev = [
    "requests>=2.32.2",
    "jsonref>=1.1.0",
    "pytest>=8.3.3",
    "types-requests>=2.32.0.20241016",
    "pytest-cov>=6.0.0",
    "mypy>=1.13.0",
    "tailwind-colors>=1.3.0",
    "pytest-order>=1.3.0",
    "types-tqdm>=4.67.0.20241119",
    "ruff>=0.8.1",
]

[tool.pdm]
distribution = false

# using pytest markers from the `pytest-order` library, we run the
# quick tests before the retrieval tests to fail fast
[tool.pytest.ini_options]
markers = [
    "integration: can only be run on a configured system",
    "quick: can be run in a CI environment, < 30 seconds, everything except running actual retrievals",
    "ci: can be run in a CI environment, ~ 3 min, run the complete tests but without running the actual retrieval algorithms",
    "complete: can be run in a CI environment, ~ 10 - 20 minutes, runs three sample days from different instruments and locations for every retrieval algorithm and every atmospheric profile",
]

[tool.mypy]
strict = true
implicit_reexport = true
warn_unused_ignores = false
plugins = ["pydantic.mypy"]

[tool.ruff]
line-length = 100
exclude = [
    "src/retrieval/algorithms/proffast-2.2/main/prfpylot",
    "src/retrieval/algorithms/proffast-2.3/main/prfpylot",
    "src/retrieval/algorithms/proffast-2.4/main/prfpylot",
    "src/retrieval/algorithms/proffast-2.4.1/main/prfpylot",
]

[tool.ruff.lint]
exclude = [
    "src/retrieval/algorithms/proffast-2.2/main/prfpylot",
    "src/retrieval/algorithms/proffast-2.3/main/prfpylot",
    "src/retrieval/algorithms/proffast-2.4/main/prfpylot",
    "src/retrieval/algorithms/proffast-2.4.1/main/prfpylot",
    "tests/*",
]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I001",
]
ignore = [
    # line too long
    "E501",
    # import not at the top
    "E402",
]

[[tool.mypy.overrides]]
module = [
    "src.prfpylot.prfpylot.pylot",
    "scipy",
    "scipy.signal",
    "polars",
    "matplotlib.*",
    "skyfield.*",
]
ignore_missing_imports = true
